{"version":3,"sources":["context/SidebarContext.js","context/UserContext.js","components/ThemedSuspense.js","components/AccessibleNavigationAnnouncer.js","App.js","serviceWorker.js","index.js"],"names":["SidebarContext","React","createContext","SidebarProvider","children","useState","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value","useMemo","Provider","UserContext","UserProvider","props","section","setSection","changeSection","val","ThemedSuspense","className","AccessibleNavigationAnnouncer","message","setMessage","location","useLocation","useEffect","pathname","slice","setTimeout","role","aria-live","aria-atomic","Layout","lazy","Login","Profile","Home","App","console","log","localStorage","getItem","profileSelect","setProfileSelect","login","setLogin","basename","path","component","exact","from","to","render","checkProfile","checkLogin","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","fallback","usePreferences","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.145c0206.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\n\n// create context\nexport const SidebarContext = React.createContext()\n\nexport const SidebarProvider = ({ children }) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  function toggleSidebar() {\n    setIsSidebarOpen(!isSidebarOpen)\n  }\n\n  function closeSidebar() {\n    setIsSidebarOpen(false)\n  }\n\n  const value = useMemo(\n    () => ({\n      isSidebarOpen,\n      toggleSidebar,\n      closeSidebar,\n    }),\n    [isSidebarOpen]\n  )\n\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\n}\n","import React,{createContext,useState} from \"react\";\n\nconst UserContext=createContext();\n\n\nfunction UserProvider(props){\n\n    const [section,setSection]=useState('Main Syllabus');\n\n    function changeSection(val)\n    {\n        setSection(val);\n    }\n\n    const value={\n       section: section,\n       changeSection: changeSection\n    }\n\n \n\n    \n    return(\n<UserContext.Provider value={value} >\n    {props.children}\n</UserContext.Provider>\n    )\n}\n\nexport {UserContext,UserProvider} ;","import React from 'react'\n\nfunction ThemedSuspense() {\n  return (\n    <div className=\"w-full h-screen p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\n      Loading...\n    </div>\n  )\n}\n\nexport default ThemedSuspense\n","import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nfunction AccessibleNavigationAnnouncer() {\n  const [message, setMessage] = useState('')\n  const location = useLocation()\n\n  useEffect(() => {\n    // ignore the /\n    if (location.pathname.slice(1)) {\n      // make sure navigation has occurred and screen reader is ready\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\n    } else {\n      setMessage('')\n    }\n  }, [location])\n\n  return (\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\n      {message}\n    </span>\n  )\n}\n\nexport default AccessibleNavigationAnnouncer\n","import React, { lazy, useRef } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport AccessibleNavigationAnnouncer from './components/AccessibleNavigationAnnouncer'\nimport { useState } from 'react';\n\nconst Layout = lazy(() => import('./containers/Layout'))\nconst Login = lazy(() => import('./pages/Login'))\nconst CreateAccount = lazy(() => import('./pages/CreateAccount'))\nconst Profile = lazy(() => import('./pages/Profile'))\nconst ForgotPassword = lazy(() => import('./pages/ForgotPassword'))\nconst Dashboard = lazy(() => import('./pages/Dashboard'))\nconst Home = lazy(() => import('./pages/Home'))\n\nfunction App() {\n\n\n\n  console.log(\"local->\"+localStorage.getItem('login'));\n    \n  const [profileSelect,setProfileSelect]=useState(()=>{\n    if(localStorage.getItem('profile'))\n    {\n      console.log(\"Profile is selected\");\n      return localStorage.getItem('profile');\n    }\n    else\n    {\n      console.log(\"profile is not selected\");\n      return \"\";\n    }\n    });\n\n    console.log(\"profile->\"+localStorage.getItem('profile'));\n\n  const [login,setLogin]=useState(()=>{\n    if(localStorage.getItem('login')&&localStorage.getItem(\"login\")===\"true\")\n    {\n      console.log(\"Login is true\");\n      return true;\n    }\n    else\n    {\n      console.log(\"Login is false\");\n      setProfileSelect(\"\");\n      return false;\n    }\n    });\n\n\n  return (\n    <>\n    {console.log(\"Profile is \"+profileSelect)}\n    {/* /V-school-app */}\n      <Router basename=\"/V-school-app\">\n        <AccessibleNavigationAnnouncer />\n       \n          {\n            (!login)?\n            <Switch> \n            <Route exact path=\"/\" render={()=><Login checkLogin={setLogin}/>} />\n            <Route path=\"/login\" render={()=><Login checkLogin={setLogin}/>}  />\n            <Redirect from=\"*\" to=\"/\" />\n            </Switch>\n            \n            :\n\n              (!profileSelect)? \n            <Switch>\n            <Route exact path=\"/profile\" render={()=><Profile checkProfile={setProfileSelect}/>} />\n            <Redirect from=\"*\" to=\"/profile\" />\n            </Switch>\n            :\n            <Switch>\n            <Route path=\"/app\" component={Layout} />\n            <Route path=\"/app/Home\" component={Home} />\n            {/* <Route path=\"/profile\" component={Profile} /> */}\n            {/* <Redirect exact from=\"/\" component={Layout} /> */}\n            <Redirect exact from=\"/\" to=\"/app/Home\" />\n            <Redirect exact from=\"/\" to=\"/app/Home\" />\n            <Redirect from=\"*\" to='/app/Home'/>\n          </Switch>\n            \n          }\n          \n       \n      </Router>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/css/tailwind.output.css'\nimport App from './App'\nimport { SidebarProvider } from './context/SidebarContext'\nimport ThemedSuspense from './components/ThemedSuspense'\nimport { Windmill } from '@windmill/react-ui'\nimport * as serviceWorker from './serviceWorker';\nimport {UserProvider} from \"./context/UserContext\";\n\n// if (process.env.NODE_ENV !== 'production') {\n//   const axe = require('react-axe')\n//   axe(React, ReactDOM, 1000)\n// }\n\nReactDOM.render(\n  <UserProvider>\n  <SidebarProvider>\n    <Suspense fallback={<ThemedSuspense />}>\n      <Windmill usePreferences>\n        <App />\n      </Windmill>\n    </Suspense>\n  </SidebarProvider>\n  </UserProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}